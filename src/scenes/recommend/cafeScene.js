import { Scenes, Markup } from "telegraf";
import { cafeSearch } from "../../services/recommendService.js";

const cafeScene = new Scenes.BaseScene("cafe");
cafeScene.enter(async (ctx) => {
  try {
    ctx.reply(
      "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
      Markup.keyboard([
        Markup.button.locationRequest("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"),
      ])
        .resize()
        .oneTime()
    );
  } catch (error) {
    console.log(error.message);
  }
});

cafeScene.on("message", async (ctx) => {
  try {
    if (ctx.message.location) {
      const { latitude: lat, longitude: lon } = ctx.message.location;
      const data = await cafeSearch({ lat, lon });

      ctx.reply("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...");
      ctx.reply("–ë–ª–∏–∂–∞–π—à–∏–µ –∫–∞—Ñ–µ:");

      for (const place of data) {
        const { formatted, distance } = place.properties;
        await ctx.replyWithHTML(` ü•û <b>${formatted}</b>\n${distance}–º`);
      }

      return await ctx.scene.leave();
    } else {
      ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
    }
  } catch (error) {
    console.log(error.message);
  }
});

export { cafeScene };
