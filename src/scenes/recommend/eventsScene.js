import { Scenes, Markup } from "telegraf";
import { eventsSearch } from "../../services/recommendService.js";

const eventScene = new Scenes.BaseScene("events");
eventScene.enter(async (ctx) => {
  try {
    ctx.reply(
      "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
      Markup.keyboard([
        Markup.button.locationRequest("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"),
      ])
        .resize()
        .oneTime()
    );
  } catch (error) {
    console.log(error);
  }
});

eventScene.on("message", async (ctx) => {
  try {
    Markup.removeKeyboard();
    let params;
    if (ctx.message.location) {
      const { latitude: lat, longitude: lon } = ctx.message.location;
      params = { lat, lon };
    } else {
      params = { city: ctx.message.text };
    }

    const { results } = await eventsSearch(params);

    if (results.length) {
      await ctx.reply("–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:");

      for (const result of results) {
        const {
          location: { formatted_address },
          name,
        } = result;
        await ctx.replyWithHTML(` üéä <b>${name}</b>\n${formatted_address}`);
      }
    } else {
      ctx.reply("–°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
    }

    return await ctx.scene.leave();
  } catch (error) {
    console.log(error.message);
  }
});

export { eventScene };
