import { Scenes, Markup } from "telegraf";
import { fetchSubsListKeyboard } from "#services/subscriptionService.js";
import { getWeather } from "#services/weatherService.js";
import { iconMap } from "#config/constants.js";
import { Subscription } from "#models/Subscription.js";

const mySubsScene = new Scenes.BaseScene("mySubs");
mySubsScene.enter(async (ctx) => {
  try {
    const userId = ctx.from.id;
    const bdUserSub = await Subscription.findOne({ userId });
    if (!bdUserSub || bdUserSub.subscriptions.length === 0) {
      await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–≥–æ–¥—É");
      await ctx.scene.leave();
      return;
    }
    const backBtn = { text: "–í—ã–π—Ç–∏", data: "exit" };
    const subsListKeyboard = await fetchSubsListKeyboard(userId, backBtn, "üëÄ");
    return ctx.reply(`–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:`, subsListKeyboard);
  } catch (error) {
    console.log(error);
  }
});

mySubsScene.on("callback_query", async (ctx) => {
  try {
    const callbackData = JSON.parse(ctx.callbackQuery.data);

    if (callbackData.type === "exit") {
      return await ctx.scene.leave();
    }

    const city = callbackData.params;
    const [lat, lon] = callbackData.params.split("&");
    const params = lat & lon ? { lat, lon } : { city };

    await ctx.reply("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...");
    const currentWeather = await getWeather(params);
    const {
      weather: [{ description, icon }],
      main: { temp },
      name,
      wind: { speed },
    } = currentWeather;

    ctx.reply(
      `–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å (${name}):
    ${iconMap[icon]} ${Math.round(temp)}¬∞C,
    ${description}
    –í–µ—Ç–µ—Ä: ${speed} –º/—Å`,
      Markup.removeKeyboard()
    );
  } catch (error) {
    console.log(error.message);
  }
});

export { mySubsScene };
