const { Scenes, Markup } = require("telegraf");
const mySubsScene = new Scenes.BaseScene("mySubs");
const { fetchSubsListKeyboard } = require("../services/subscriptionService");
const { getWeather } = require("../services/weatherService");
const { iconMap } = require("../config/constants");

mySubsScene.enter(async (ctx) => {
  try {
    const userId = ctx.from.id;
    const backBtn = { text: "–í—ã–π—Ç–∏", data: "exit" };
    const subsListKeyboard = await fetchSubsListKeyboard(userId, backBtn, "üëÄ");
    const subsCount = subsListKeyboard.reply_markup.inline_keyboard.length;
    return subsCount - 1 > 0
      ? ctx.reply(`–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:`, subsListKeyboard)
      : ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–≥–æ–¥—É");
  } catch (error) {
    console.log(error);
  }
});

mySubsScene.on("callback_query", async (ctx) => {
  try {
    const callbackData = JSON.parse(ctx.callbackQuery.data);

    if (callbackData.type === "exit") {
      return await ctx.scene.leave();
    }

    ctx.reply("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...");
    const currentWeather = await getWeather({ city: callbackData.city });
    const {
      weather: [{ description, icon }],
      main: { temp },
      name,
      wind: { speed },
    } = currentWeather;

    ctx.reply(
      `–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å (${name}):
    ${iconMap[icon]} ${Math.round(temp)}¬∞C,
    ${description}
    –í–µ—Ç–µ—Ä: ${speed} –º/—Å`,
      Markup.removeKeyboard()
    );
  } catch (error) {
    console.log(error.message);
  }
});

module.exports = { mySubsScene };
